/*
 Navicat Premium Data Transfer

 Source Server         : mysql8
 Source Server Type    : MySQL
 Source Server Version : 80022
 Source Host           : localhost:3306
 Source Schema         : vueblog

 Target Server Type    : MySQL
 Target Server Version : 80022
 File Encoding         : 65001

 Date: 14/12/2020 23:14:20
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for m_blog
-- ----------------------------
DROP TABLE IF EXISTS `m_blog`;
CREATE TABLE `m_blog`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `user_id` bigint(0) NOT NULL,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  `created` datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `deleted` tinyint(0) NOT NULL DEFAULT 0 COMMENT '逻辑删除',
  `tag` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `views` int(0) NOT NULL DEFAULT 1,
  `updated` datetime(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 28 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of m_blog
-- ----------------------------
INSERT INTO `m_blog` VALUES (15, 1, 'mysql', 'mysql删库技巧', '啦啦啦啦辣', '2020-12-14 22:49:18', 1, 'docker', 18, NULL);
INSERT INTO `m_blog` VALUES (16, 1, '啊啊啊啊啊啊啊啊啊', '啊啊啊啊啊啊啊啊啊啊啊啊啊', '啊啊啊啊啊啊啊啊啊啊啊啊啊啊', '2020-12-14 22:48:47', 1, 'JavaSE', 1, '2020-12-13 20:49:52');
INSERT INTO `m_blog` VALUES (17, 1, '啦啦啦啦啦啦啦', '啦啦啦啦啦啦', '啦啦啦啦啦啦啦啦', '2020-12-14 22:49:15', 1, 'MQ', 1, '2020-12-13 23:51:12');
INSERT INTO `m_blog` VALUES (19, 1, 'JavaSE常用方法', 'String，File等类的常用方法', 'StringBuilder 或者 stringBuffer \n\nreverse() 字符串反转\n\nappend()添加\n\n\n\nindexOf()：返回指定字符的索引。 \n\ncharAt()：返回指定索引处的字符。 \n\nreplace()：字符串替换。 \n\ntrim()：去除字符串两端空白。 \n\nsplit()：分割字符串，返回一个分割后的字符串数组。 \n\ngetBytes()：返回字符串的 byte 类型数组。 \n\nlength()：返回字符串长度。 \n\ntoLowerCase()：将字符串转成小写字母。 \n\ntoUpperCase()：将字符串转成大写字符。 \n\nsubstring()：截取字符串。 \n\nequals()：字符串比较。\n\n\n\nFiles. exists()：检测文件路径是否存在。 \n\nFiles. createFile()：创建文件。 \n\nFiles. createDirectory()：创建文件夹。 \n\nFiles. delete()：删除一个文件或目录。 \n\nFiles. copy()：复制文件。 \n\nFiles. move()：移动文件。 \n\nFiles. size()：查看文件个数。 \n\nFiles. read()：读取文件。 \n\nFiles. write()：写入文件。\n\n\n\n如何实现数组和 List 之间的转换？ \n\n数组转 List：使用 Arrays. asList(array) 进行转换。 \n\nList 转数组：使用 List 自带的 toArray() 方法。', '2020-12-14 22:22:42', 0, 'JavaSE', 7, '2020-12-14 22:30:33');
INSERT INTO `m_blog` VALUES (20, 1, 'Idea常用快捷键', 'Idea常用快捷键', '1、Ctrl+N按名字搜索类\n\n相当于eclipse的ctrl+shift+R，输入类名可以定位到这个类文件，就像idea在其它的搜索部分的表现一样，搜索类名也能对你所要搜索的内容多个部分进行匹配，而且如果能匹配的自己写的类，优先匹配自己写的类，甚至不是自己写的类也能搜索。\n\n2、Ctrl+Shift+N按文件名搜索文件\n\n同搜索类类似，只不过可以匹配所有类型的文件了。\n\n3、Ctrl+H\n\n查看类的继承关系，例如HashMap的父类是AbstractMap，子类则有一大堆。\n\n4、Ctrl+Alt+B查看子类方法实现\n\nCtrl+B可以查看父类或父方法定义，但是不如ctrl+鼠标左键方便。但是在这里，Ctrl+B或ctrl+鼠标左键只能看见Map接口的抽象方法put的定义，不是我们想要的，这时候Ctrl+Alt+B就可以查看HashMap的put方法。\n\n5、Alt+F7查找类或方法在哪被使用\n\n相当于eclipse的ctrl+shif+H,但是速度快得多。\n\n6、Ctrl+F/Ctrl+Shift+F按照文本的内容查找\n\n相当于eclipse的ctrl+H，速度优势更加明显。其中Ctrl+F是在本页查找，Ctrl+Shift+F是全局查找。\n\n7、Shift+Shift搜索任何东西\n\nshift+shift非常强大，可搜索类、资源、配置项、方法等，还能搜索路径。其中搜索路径非常实用，例如你写了一个功能叫hello，在java，js，css，jsp中都有hello的文件夹，那我们可以搜索\"hello/\"找到路径中包含hello的文件夹。\n\n8、查看接口的实现类\n\nIDEA 风格 ctrl + alt +B     或者     Ctrl+Alt+鼠标左键', '2020-12-14 22:36:38', 0, 'JavaSE', 1, '2020-12-14 22:36:38');
INSERT INTO `m_blog` VALUES (21, 1, 'MybatisPlus代码生成器', 'MybatisPlus代码生成器相关配置', '\npublic class CodeGenerator {\n\n    /**\n     * <p>\n     * 读取控制台内容\n     * </p>\n     */\n    public static String scanner(String tip) {\n        Scanner scanner = new Scanner(System.in);\n        StringBuilder help = new StringBuilder();\n        help.append(\"请输入\" + tip + \"：\");\n        System.out.println(help.toString());\n        if (scanner.hasNext()) {\n            String ipt = scanner.next();\n            if (StringUtils.isNotEmpty(ipt)) {\n                return ipt;\n            }\n        }\n        throw new MybatisPlusException(\"请输入正确的\" + tip + \"！\");\n    }\n\n    public static void main(String[] args) {\n        // 代码生成器\n        AutoGenerator mpg = new AutoGenerator();\n\n        // 全局配置\n        GlobalConfig gc = new GlobalConfig();\n        String projectPath = System.getProperty(\"user.dir\");\n        gc.setOutputDir(projectPath + \"/src/main/java\");\n        gc.setAuthor(\"admin\");\n        gc.setOpen(false);\n        // gc.setSwagger2(true); 实体属性 Swagger2 注解\n        gc.setServiceName(\"%sService\");\n        mpg.setGlobalConfig(gc);\n\n        // 数据源配置\n        DataSourceConfig dsc = new DataSourceConfig();\n        dsc.setUrl(\"jdbc:mysql://localhost:3306/vueblog?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=UTC\");\n        // dsc.setSchemaName(\"public\");\n        dsc.setDriverName(\"com.mysql.cj.jdbc.Driver\");\n        dsc.setUsername(\"root\");\n        dsc.setPassword(\"123456\");\n        mpg.setDataSource(dsc);\n\n        // 包配置\n        PackageConfig pc = new PackageConfig();\n        pc.setModuleName(null);\n        pc.setParent(\"com.cbn\");\n        mpg.setPackageInfo(pc);\n\n        // 自定义配置\n        InjectionConfig cfg = new InjectionConfig() {\n            @Override\n            public void initMap() {\n                // to do nothing\n            }\n        };\n\n        // 如果模板引擎是 freemarker\n        String templatePath = \"/templates/mapper.xml.ftl\";\n        // 如果模板引擎是 velocity\n        // String templatePath = \"/templates/mapper.xml.vm\";\n\n        // 自定义输出配置\n        List<FileOutConfig> focList = new ArrayList<>();\n        // 自定义配置会被优先输出\n        focList.add(new FileOutConfig(templatePath) {\n            @Override\n            public String outputFile(TableInfo tableInfo) {\n                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！\n                return projectPath + \"/src/main/resources/mapper/\"\n                        + \"/\" + tableInfo.getEntityName() + \"Mapper\" + StringPool.DOT_XML;\n            }\n        });\n\n        cfg.setFileOutConfigList(focList);\n        mpg.setCfg(cfg);\n\n        // 配置模板\n        TemplateConfig templateConfig = new TemplateConfig();\n\n        templateConfig.setXml(null);\n        mpg.setTemplate(templateConfig);\n\n        // 策略配置\n        StrategyConfig strategy = new StrategyConfig();\n        strategy.setNaming(NamingStrategy.underline_to_camel);\n        strategy.setColumnNaming(NamingStrategy.underline_to_camel);\n        strategy.setEntityLombokModel(true);\n        strategy.setRestControllerStyle(true);\n        strategy.setInclude(scanner(\"表名，多个英文逗号分割\").split(\",\"));\n        strategy.setControllerMappingHyphenStyle(true);\n        strategy.setTablePrefix(\"m_\");\n        mpg.setStrategy(strategy);\n        mpg.setTemplateEngine(new FreemarkerTemplateEngine());\n        mpg.execute();\n    }\n}', '2020-12-14 22:38:38', 0, 'Mybatis', 1, '2020-12-14 22:38:38');
INSERT INTO `m_blog` VALUES (22, 1, 'MybatisPlus配置', 'MybatisPlus依赖，配置分页，配置文件', '```\n<dependency>\n    <groupId>com.baomidou</groupId>\n    <artifactId>mybatis-plus-boot-starter</artifactId>\n    <version>3.2.0</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-freemarker</artifactId>\n</dependency>\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <scope>runtime</scope>\n</dependency>\n<!--mp代码生成器-->\n<dependency>\n    <groupId>com.baomidou</groupId>\n    <artifactId>mybatis-plus-generator</artifactId>\n    <version>3.2.0</version>\n</dependency>\n\n```\n\n\n```\n@Configuration\n@EnableTransactionManagement\n@MapperScan(\"com.cbn.mapper\")\npublic class MybatisPlusConfig {\n    @Bean\n    public PaginationInterceptor paginationInterceptor() {\n        PaginationInterceptor paginationInterceptor = new PaginationInterceptor();\n        return paginationInterceptor;\n    }\n}\n\n```\n\n\n\n```\n# 配置日志\nmybatis-plus.configuration.log-impl=org.apache.ibatis.logging.slf4j.Slf4jImpl\n# 别名扫描\nmybatis-plus.type-aliases-package=cn.hey.second.entity\n# 驼峰命名映射\nmybatis-plus.configuration.map-underscore-to-camel-case=true\n\n```\n', '2020-12-14 22:40:13', 0, 'Mybatis', 8, '2020-12-14 22:43:07');
INSERT INTO `m_blog` VALUES (23, 1, 'Redis整合Springboot', 'Redis整合Springboot依赖与配置', '```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n\n```\n```\nspring:\n  redis:\n    database: 0           # Redis服务器数据库\n    host: 192.168.6.27    # Redis服务器地址\n    port: 6379            # Redis服务器连接端口\n    password: 123456      # Redis服务器连接密码（默认为空）\n    timeout: 6000ms       # 连接超时时间（毫秒）\n    jedis:\n      pool:\n        max-active: 200   # 连接池最大连接数（使用负值表示没有限制）\n        max-wait: -1      # 连接池最大阻塞等待时间（使用负值表示没有限制）\n        max-idle: 10      # 连接池中的最大空闲连接\n        min-idle: 0       # 连接池中的最小空闲连接\n\n```\n```\n@Configuration\n@AutoConfigureAfter(RedisAutoConfiguration.class)\npublic class RedisConfig {\n    /**\n     * 写我们自己的template\n     */\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        log.info(\"Redis --- 使用自定义配置类\");\n        //为了开发方便，一般直接使用<String, Object>\n        // 默认配置\n        RedisTemplate<String, Object> template = new RedisTemplate<>();\n        template.setConnectionFactory(redisConnectionFactory);\n        // Json序列化配置\n        Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<Object>(Object.class);\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\n        // String序列化\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        // 配置具体的序列化方式\n        template.setKeySerializer(stringRedisSerializer);\n        template.setHashKeySerializer(stringRedisSerializer);\n        template.setValueSerializer(jackson2JsonRedisSerializer);\n        template.setHashValueSerializer(jackson2JsonRedisSerializer);\n\n        template.afterPropertiesSet();\n        return template;\n    }\n}\n\n```\n', '2020-12-14 22:45:11', 0, 'redis', 1, '2020-12-14 22:45:11');
INSERT INTO `m_blog` VALUES (24, 1, 'redis工具类', 'redis工具类', '```\n@Component\npublic final class RedisUtil {\n\n    private RedisTemplate<String, Object> redisTemplate;\n\n    @Autowired\n    public void setRedisTemplate(RedisTemplate<String, Object> redisTemplate){\n        this.redisTemplate = redisTemplate;\n    }\n\n    \n    // =============================common============================\n    /**\n     * 指定缓存失效时间\n     * @param key  键\n     * @param time 时间(秒)\n     */\n    public void expire(String key, long time) {\n        try {\n            if (time > 0) {\n                redisTemplate.expire(key, time, TimeUnit.SECONDS);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 根据key 获取过期时间\n     * @param key 键 不能为null\n     * @return 时间(秒) 返回0代表为永久有效\n     */\n    public Long getExpire(String key) {\n        return redisTemplate.getExpire(key, TimeUnit.SECONDS);\n    }\n\n\n    /**\n     * 判断key是否存在\n     * @param key 键\n     * @return true 存在 false不存在\n     */\n    public Boolean hasKey(String key) {\n        try {\n            return redisTemplate.hasKey(key);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * 删除缓存\n     * @param key 可以传一个值 或多个\n     * @return Long 大于0则成功删除 否则失败\n     */\n    @SuppressWarnings(\"unchecked\")\n    public Long del(String... key) {\n        if (key != null && key.length > 0) {\n            if (key.length == 1) {\n                Boolean result = redisTemplate.delete(key[0]);\n                // 先判断是否为空 再判断是否为true\n                return result==null?-1L:result ?1L:-1L;\n            } else {\n                Long delete = redisTemplate.delete(CollectionUtils.arrayToList(key));\n                return delete;\n            }\n        }\n        return -1L;\n    }\n\n\n    // ============================String=============================\n\n    /**\n     * 普通缓存获取\n     * @param key 键\n     * @return 值\n     */\n    public Object get(String key) {\n        return key == null ? null : redisTemplate.opsForValue().get(key);\n    }\n    \n    /**\n     * 普通缓存放入\n     * @param key   键\n     * @param value 值\n     */\n\n    public void set(String key, Object value) {\n        try {\n            redisTemplate.opsForValue().set(key, value);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 如果不存在就放入\n     * 有效期为一天\n     * @param key   键\n     * @param value 值\n     * @return boolean\n     */\n\n    public Boolean setIfNotExists(String key, Object value,Duration timeout) {\n        try {\n            return redisTemplate.opsForValue().setIfPresent(key,value, timeout);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * 普通缓存放入并设置时间\n     * @param key   键\n     * @param value 值\n     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期\n     * @return true成功 false 失败\n     */\n\n    public boolean set(String key, Object value, long time) {\n        try {\n            if (time > 0) {\n                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);\n            } else {\n                set(key, value);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * 递增\n     * @param key   键\n     * @param delta 要增加几(大于0)\n     */\n    public Long incr(String key, long delta) {\n        if (delta < 0) {\n            throw new RuntimeException(\"递增因子必须大于0\");\n        }\n        return redisTemplate.opsForValue().increment(key, delta);\n    }\n\n\n    /**\n     * 递减\n     * @param key   键\n     * @param delta 要减少几(小于0)\n     */\n    public Long decr(String key, long delta) {\n        if (delta < 0) {\n            throw new RuntimeException(\"递减因子必须大于0\");\n        }\n        return redisTemplate.opsForValue().increment(key, -delta);\n    }\n\n\n    // ================================Map=================================\n\n    /**\n     * HashGet\n     * @param key  键 不能为null\n     * @param item 项 不能为null\n     */\n    public Object hget(String key, String item) {\n        return redisTemplate.opsForHash().get(key, item);\n    }\n    \n    /**\n     * 获取hashKey对应的所有键值\n     * @param key 键\n     * @return 对应的多个键值\n     */\n    public Map<Object, Object> hmget(String key) {\n        return redisTemplate.opsForHash().entries(key);\n    }\n    \n    /**\n     * HashSet\n     * @param key 键\n     * @param map 对应多个键值\n     */\n    public boolean hmset(String key, Map<String, Object> map) {\n        try {\n            redisTemplate.opsForHash().putAll(key, map);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * HashSet 并设置时间\n     * @param key  键\n     * @param map  对应多个键值\n     * @param time 时间(秒)\n     * @return true成功 false失败\n     */\n    public boolean hmset(String key, Map<String, Object> map, long time) {\n        try {\n            redisTemplate.opsForHash().putAll(key, map);\n            if (time > 0) {\n                expire(key, time);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * 向一张hash表中放入数据,如果不存在将创建\n     *\n     * @param key   键\n     * @param item  项\n     * @param value 值\n     * @return true 成功 false失败\n     */\n    public boolean hset(String key, String item, Object value) {\n        try {\n            redisTemplate.opsForHash().put(key, item, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    /**\n     * 向一张hash表中放入数据,如果不存在将创建\n     *\n     * @param key   键\n     * @param item  项\n     * @param value 值\n     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间\n     * @return true 成功 false失败\n     */\n    public boolean hset(String key, String item, Object value, long time) {\n        try {\n            redisTemplate.opsForHash().put(key, item, value);\n            if (time > 0) {\n                expire(key, time);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * 删除hash表中的值\n     *\n     * @param key  键 不能为null\n     * @param item 项 可以使多个 不能为null\n     */\n    public void hdel(String key, Object... item) {\n        redisTemplate.opsForHash().delete(key, item);\n    }\n\n\n    /**\n     * 判断hash表中是否有该项的值\n     *\n     * @param key  键 不能为null\n     * @param item 项 不能为null\n     * @return true 存在 false不存在\n     */\n    public boolean hHasKey(String key, String item) {\n        return redisTemplate.opsForHash().hasKey(key, item);\n    }\n\n\n    /**\n     * hash递增 如果不存在,就会创建一个 并把新增后的值返回\n     *\n     * @param key  键\n     * @param item 项\n     * @param by   要增加几(大于0)\n     */\n    public double hincr(String key, String item, double by) {\n        return redisTemplate.opsForHash().increment(key, item, by);\n    }\n\n\n    /**\n     * hash递减\n     *\n     * @param key  键\n     * @param item 项\n     * @param by   要减少记(小于0)\n     */\n    public double hdecr(String key, String item, double by) {\n        return redisTemplate.opsForHash().increment(key, item, -by);\n    }\n\n\n    // ============================set=============================\n\n    /**\n     * 根据key获取Set中的所有值\n     * @param key 键\n     */\n    public Set<Object> sGet(String key) {\n        try {\n            return redisTemplate.opsForSet().members(key);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n\n    /**\n     * 根据value从一个set中查询,是否存在\n     *\n     * @param key   键\n     * @param value 值\n     * @return true 存在 false不存在\n     */\n    public boolean sHasKey(String key, Object value) {\n        try {\n            return redisTemplate.opsForSet().isMember(key, value);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * 将数据放入set缓存\n     *\n     * @param key    键\n     * @param values 值 可以是多个\n     * @return 成功个数\n     */\n    public long sSet(String key, Object... values) {\n        try {\n            return redisTemplate.opsForSet().add(key, values);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n\n    /**\n     * 将set数据放入缓存\n     *\n     * @param key    键\n     * @param time   时间(秒)\n     * @param values 值 可以是多个\n     * @return 成功个数\n     */\n    public Long sSetAndTime(String key, long time, Object... values) {\n        try {\n            Long count = redisTemplate.opsForSet().add(key, values);\n            if (time > 0) {\n                expire(key, time);\n            }\n            return count;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0L;\n        }\n    }\n\n\n    /**\n     * 获取set缓存的长度\n     *\n     * @param key 键\n     */\n    public long sGetSetSize(String key) {\n        try {\n            return redisTemplate.opsForSet().size(key);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n\n    /**\n     * 移除值为value的\n     *\n     * @param key    键\n     * @param values 值 可以是多个\n     * @return 移除的个数\n     */\n\n    public long setRemove(String key, Object... values) {\n        try {\n            Long count = redisTemplate.opsForSet().remove(key, values);\n            return count;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n    // ===============================list=================================\n    \n    /**\n     * 获取list缓存的内容\n     *\n     * @param key   键\n     * @param start 开始\n     * @param end   结束 0 到 -1代表所有值\n     */\n    public List<Object> lGet(String key, long start, long end) {\n        try {\n            return redisTemplate.opsForList().range(key, start, end);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n\n    /**\n     * 获取list缓存的长度\n     *\n     * @param key 键\n     */\n    public long lGetListSize(String key) {\n        try {\n            return redisTemplate.opsForList().size(key);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n\n    /**\n     * 通过索引 获取list中的值\n     *\n     * @param key   键\n     * @param index 索引 index>=0时， 0 表头，1 第二个元素，依次类推；index<0时，-1，表尾，-2倒数第二个元素，依次类推\n     */\n    public Object lGetIndex(String key, long index) {\n        try {\n            return redisTemplate.opsForList().index(key, index);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n\n    /**\n     * 将list放入缓存\n     *\n     * @param key   键\n     * @param value 值\n     */\n    public boolean lSet(String key, Object value) {\n        try {\n            redisTemplate.opsForList().rightPush(key, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n\n    /**\n     * 将list放入缓存\n     * @param key   键\n     * @param value 值\n     * @param time  时间(秒)\n     */\n    public boolean lSet(String key, Object value, long time) {\n        try {\n            redisTemplate.opsForList().rightPush(key, value);\n            if (time > 0) {\n                expire(key, time);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n\n    }\n\n\n    /**\n     * 将list放入缓存\n     *\n     * @param key   键\n     * @param value 值\n     * @return\n     */\n    public boolean lSet(String key, List<Object> value) {\n        try {\n            redisTemplate.opsForList().rightPushAll(key, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n\n    }\n\n\n    /**\n     * 将list放入缓存\n     *\n     * @param key   键\n     * @param value 值\n     * @param time  时间(秒)\n     * @return\n     */\n    public boolean lSet(String key, List<Object> value, long time) {\n        try {\n            redisTemplate.opsForList().rightPushAll(key, value);\n            if (time > 0) {\n                expire(key, time);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    /**\n     * 根据索引修改list中的某条数据\n     *\n     * @param key   键\n     * @param index 索引\n     * @param value 值\n     * @return\n     */\n\n    public boolean lUpdateIndex(String key, long index, Object value) {\n        try {\n            redisTemplate.opsForList().set(key, index, value);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    /**\n     * 移除N个值为value\n     *\n     * @param key   键\n     * @param count 移除多少个\n     * @param value 值\n     * @return 移除的个数\n     */\n\n    public long lRemove(String key, long count, Object value) {\n        try {\n            Long remove = redisTemplate.opsForList().remove(key, count, value);\n            return remove;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n\n    }\n\n}\n\n```\n', '2020-12-14 22:46:58', 0, 'redis', 1, '2020-12-14 22:46:58');
INSERT INTO `m_blog` VALUES (25, 1, 'AOP实现日志功能', '利用Spring的AOP特性实现日志功能', '```\n@Aspect\n@Component\npublic class LogAspect {\n\n    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    @Pointcut(\"execution(* com.cbn.controller.*.*(..))\")\n    public void log() {}\n\n\n    @Before(\"log()\")\n    public void doBefore(JoinPoint joinPoint) {\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n        String url = request.getRequestURL().toString();\n        String ip = request.getRemoteAddr();\n        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + \".\" + joinPoint.getSignature().getName();\n        Object[] args = joinPoint.getArgs();\n        RequestLog requestLog = new RequestLog(url, ip, classMethod, args);\n        logger.info(\"Request : {}\", requestLog);\n    }\n\n    @After(\"log()\")\n    public void doAfter() {\n//        logger.info(\"--------doAfter--------\");\n    }\n\n    @AfterReturning(returning = \"result\",pointcut = \"log()\")\n    public void doAfterRuturn(Object result) {\n        logger.info(\"Result : {}\", result);\n    }\n\n    private class RequestLog {\n        private String url;\n        private String ip;\n        private String classMethod;\n        private Object[] args;\n\n        public RequestLog(String url, String ip, String classMethod, Object[] args) {\n            this.url = url;\n            this.ip = ip;\n            this.classMethod = classMethod;\n            this.args = args;\n        }\n\n        @Override\n        public String toString() {\n            return \"{\" +\n                    \"url=\'\" + url + \'\\\'\' +\n                    \", ip=\'\" + ip + \'\\\'\' +\n                    \", classMethod=\'\" + classMethod + \'\\\'\' +\n                    \", args=\" + Arrays.toString(args) +\n                    \'}\';\n        }\n    }\n\n}\n\n```\n```\n\nlogging:\n  level:\n    root: info\n    com.cbn: debug\n  file:\n    name: log/blog-dev.log\n```\n', '2020-12-14 22:50:49', 0, 'Spring', 1, '2020-12-14 22:50:49');
INSERT INTO `m_blog` VALUES (26, 1, 'servletutil', 'servletutil', '```\n/**\n * 客户端工具类\n */\npublic class ServletUtils\n{\n    /**\n     * 获取String参数\n     */\n    public static String getParameter(String name)\n    {\n        return getRequest().getParameter(name);\n    }\n\n    /**\n     * 获取String参数\n     */\n    public static String getParameter(String name, String defaultValue)\n    {\n        return Convert.toStr(getRequest().getParameter(name), defaultValue);\n    }\n\n    /**\n     * 获取Integer参数\n     */\n    public static Integer getParameterToInt(String name)\n    {\n        return Convert.toInt(getRequest().getParameter(name));\n    }\n\n    /**\n     * 获取Integer参数\n     */\n    public static Integer getParameterToInt(String name, Integer defaultValue)\n    {\n        return Convert.toInt(getRequest().getParameter(name), defaultValue);\n    }\n\n    /**\n     * 获取request\n     */\n    public static HttpServletRequest getRequest()\n    {\n        return getRequestAttributes().getRequest();\n    }\n\n    /**\n     * 获取response\n     */\n    public static HttpServletResponse getResponse()\n    {\n        return getRequestAttributes().getResponse();\n    }\n\n    /**\n     * 获取session\n     */\n    public static HttpSession getSession()\n    {\n        return getRequest().getSession();\n    }\n\n    public static ServletRequestAttributes getRequestAttributes()\n    {\n        RequestAttributes attributes = RequestContextHolder.getRequestAttributes();\n        return (ServletRequestAttributes) attributes;\n    }\n\n    /**\n     * 将字符串渲染到客户端\n     * \n     * @param response 渲染对象\n     * @param string 待渲染的字符串\n     * @return null\n     */\n    public static String renderString(HttpServletResponse response, String string)\n    {\n        try\n        {\n            response.setStatus(200);\n            response.setContentType(\"application/json\");\n            response.setCharacterEncoding(\"utf-8\");\n            response.getWriter().print(string);\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    /**\n     * 是否是Ajax异步请求\n     * \n     * @param request\n     */\n    public static boolean isAjaxRequest(HttpServletRequest request)\n    {\n        String accept = request.getHeader(\"accept\");\n        if (accept != null && accept.indexOf(\"application/json\") != -1)\n        {\n            return true;\n        }\n\n        String xRequestedWith = request.getHeader(\"X-Requested-With\");\n        if (xRequestedWith != null && xRequestedWith.indexOf(\"XMLHttpRequest\") != -1)\n        {\n            return true;\n        }\n\n        String uri = request.getRequestURI();\n        if (StringUtils.inStringIgnoreCase(uri, \".json\", \".xml\"))\n        {\n            return true;\n        }\n\n        String ajax = request.getParameter(\"__ajax\");\n        if (StringUtils.inStringIgnoreCase(ajax, \"json\", \"xml\"))\n        {\n            return true;\n        }\n        return false;\n    }\n}\n\n```\n', '2020-12-14 22:51:33', 0, 'JavaSE', 1, '2020-12-14 22:51:33');
INSERT INTO `m_blog` VALUES (27, 1, 'StringUtil', 'StringUtil', '```\n/**\n * 字符串工具类\n */\npublic class StringUtils extends org.apache.commons.lang3.StringUtils\n{\n    /** 空字符串 */\n    private static final String NULLSTR = \"\";\n\n    /** 下划线 */\n    private static final char SEPARATOR = \'_\';\n\n    /**\n     * 获取参数不为空值\n     * \n     * @param value defaultValue 要判断的value\n     * @return value 返回值\n     */\n    public static <T> T nvl(T value, T defaultValue)\n    {\n        return value != null ? value : defaultValue;\n    }\n\n    /**\n     * * 判断一个Collection是否为空， 包含List，Set，Queue\n     * \n     * @param coll 要判断的Collection\n     * @return true：为空 false：非空\n     */\n    public static boolean isEmpty(Collection<?> coll)\n    {\n        return isNull(coll) || coll.isEmpty();\n    }\n\n    /**\n     * * 判断一个Collection是否非空，包含List，Set，Queue\n     * \n     * @param coll 要判断的Collection\n     * @return true：非空 false：空\n     */\n    public static boolean isNotEmpty(Collection<?> coll)\n    {\n        return !isEmpty(coll);\n    }\n\n    /**\n     * * 判断一个对象数组是否为空\n     * \n     * @param objects 要判断的对象数组\n     ** @return true：为空 false：非空\n     */\n    public static boolean isEmpty(Object[] objects)\n    {\n        return isNull(objects) || (objects.length == 0);\n    }\n\n    /**\n     * * 判断一个对象数组是否非空\n     * \n     * @param objects 要判断的对象数组\n     * @return true：非空 false：空\n     */\n    public static boolean isNotEmpty(Object[] objects)\n    {\n        return !isEmpty(objects);\n    }\n\n    /**\n     * * 判断一个Map是否为空\n     * \n     * @param map 要判断的Map\n     * @return true：为空 false：非空\n     */\n    public static boolean isEmpty(Map<?, ?> map)\n    {\n        return isNull(map) || map.isEmpty();\n    }\n\n    /**\n     * * 判断一个Map是否为空\n     * \n     * @param map 要判断的Map\n     * @return true：非空 false：空\n     */\n    public static boolean isNotEmpty(Map<?, ?> map)\n    {\n        return !isEmpty(map);\n    }\n\n    /**\n     * * 判断一个字符串是否为空串\n     * \n     * @param str String\n     * @return true：为空 false：非空\n     */\n    public static boolean isEmpty(String str)\n    {\n        return isNull(str) || NULLSTR.equals(str.trim());\n    }\n\n    /**\n     * * 判断一个字符串是否为非空串\n     * \n     * @param str String\n     * @return true：非空串 false：空串\n     */\n    public static boolean isNotEmpty(String str)\n    {\n        return !isEmpty(str);\n    }\n\n    /**\n     * * 判断一个对象是否为空\n     * \n     * @param object Object\n     * @return true：为空 false：非空\n     */\n    public static boolean isNull(Object object)\n    {\n        return object == null;\n    }\n\n    /**\n     * * 判断一个对象是否非空\n     * \n     * @param object Object\n     * @return true：非空 false：空\n     */\n    public static boolean isNotNull(Object object)\n    {\n        return !isNull(object);\n    }\n\n    /**\n     * * 判断一个对象是否是数组类型（Java基本型别的数组）\n     * \n     * @param object 对象\n     * @return true：是数组 false：不是数组\n     */\n    public static boolean isArray(Object object)\n    {\n        return isNotNull(object) && object.getClass().isArray();\n    }\n\n    /**\n     * 去空格\n     */\n    public static String trim(String str)\n    {\n        return (str == null ? \"\" : str.trim());\n    }\n\n    /**\n     * 截取字符串\n     * \n     * @param str 字符串\n     * @param start 开始\n     * @return 结果\n     */\n    public static String substring(final String str, int start)\n    {\n        if (str == null)\n        {\n            return NULLSTR;\n        }\n\n        if (start < 0)\n        {\n            start = str.length() + start;\n        }\n\n        if (start < 0)\n        {\n            start = 0;\n        }\n        if (start > str.length())\n        {\n            return NULLSTR;\n        }\n\n        return str.substring(start);\n    }\n\n    /**\n     * 截取字符串\n     * \n     * @param str 字符串\n     * @param start 开始\n     * @param end 结束\n     * @return 结果\n     */\n    public static String substring(final String str, int start, int end)\n    {\n        if (str == null)\n        {\n            return NULLSTR;\n        }\n\n        if (end < 0)\n        {\n            end = str.length() + end;\n        }\n        if (start < 0)\n        {\n            start = str.length() + start;\n        }\n\n        if (end > str.length())\n        {\n            end = str.length();\n        }\n\n        if (start > end)\n        {\n            return NULLSTR;\n        }\n\n        if (start < 0)\n        {\n            start = 0;\n        }\n        if (end < 0)\n        {\n            end = 0;\n        }\n\n        return str.substring(start, end);\n    }\n\n    /**\n     * 格式化文本, {} 表示占位符<br>\n     * 此方法只是简单将占位符 {} 按照顺序替换为参数<br>\n     * 如果想输出 {} 使用 \\\\转义 { 即可，如果想输出 {} 之前的 \\ 使用双转义符 \\\\\\\\ 即可<br>\n     * 例：<br>\n     * 通常使用：format(\"this is {} for {}\", \"a\", \"b\") -> this is a for b<br>\n     * 转义{}： format(\"this is \\\\{} for {}\", \"a\", \"b\") -> this is \\{} for a<br>\n     * 转义\\： format(\"this is \\\\\\\\{} for {}\", \"a\", \"b\") -> this is \\a for b<br>\n     * \n     * @param template 文本模板，被替换的部分用 {} 表示\n     * @param params 参数值\n     * @return 格式化后的文本\n     */\n    public static String format(String template, Object... params)\n    {\n        if (isEmpty(params) || isEmpty(template))\n        {\n            return template;\n        }\n        return StrFormatter.format(template, params);\n    }\n\n    /**\n     * 字符串转set\n     * \n     * @param str 字符串\n     * @param sep 分隔符\n     * @return set集合\n     */\n    public static final Set<String> str2Set(String str, String sep)\n    {\n        return new HashSet<String>(str2List(str, sep, true, false));\n    }\n\n    /**\n     * 字符串转list\n     * \n     * @param str 字符串\n     * @param sep 分隔符\n     * @param filterBlank 过滤纯空白\n     * @param trim 去掉首尾空白\n     * @return list集合\n     */\n    public static final List<String> str2List(String str, String sep, boolean filterBlank, boolean trim)\n    {\n        List<String> list = new ArrayList<String>();\n        if (StringUtils.isEmpty(str))\n        {\n            return list;\n        }\n\n        // 过滤空白字符串\n        if (filterBlank && StringUtils.isBlank(str))\n        {\n            return list;\n        }\n        String[] split = str.split(sep);\n        for (String string : split)\n        {\n            if (filterBlank && StringUtils.isBlank(string))\n            {\n                continue;\n            }\n            if (trim)\n            {\n                string = string.trim();\n            }\n            list.add(string);\n        }\n\n        return list;\n    }\n\n    /**\n     * 下划线转驼峰命名\n     */\n    public static String toUnderScoreCase(String str)\n    {\n        if (str == null)\n        {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        // 前置字符是否大写\n        boolean preCharIsUpperCase = true;\n        // 当前字符是否大写\n        boolean curreCharIsUpperCase = true;\n        // 下一字符是否大写\n        boolean nexteCharIsUpperCase = true;\n        for (int i = 0; i < str.length(); i++)\n        {\n            char c = str.charAt(i);\n            if (i > 0)\n            {\n                preCharIsUpperCase = Character.isUpperCase(str.charAt(i - 1));\n            }\n            else\n            {\n                preCharIsUpperCase = false;\n            }\n\n            curreCharIsUpperCase = Character.isUpperCase(c);\n\n            if (i < (str.length() - 1))\n            {\n                nexteCharIsUpperCase = Character.isUpperCase(str.charAt(i + 1));\n            }\n\n            if (preCharIsUpperCase && curreCharIsUpperCase && !nexteCharIsUpperCase)\n            {\n                sb.append(SEPARATOR);\n            }\n            else if ((i != 0 && !preCharIsUpperCase) && curreCharIsUpperCase)\n            {\n                sb.append(SEPARATOR);\n            }\n            sb.append(Character.toLowerCase(c));\n        }\n\n        return sb.toString();\n    }\n\n    /**\n     * 是否包含字符串\n     * \n     * @param str 验证字符串\n     * @param strs 字符串组\n     * @return 包含返回true\n     */\n    public static boolean inStringIgnoreCase(String str, String... strs)\n    {\n        if (str != null && strs != null)\n        {\n            for (String s : strs)\n            {\n                if (str.equalsIgnoreCase(trim(s)))\n                {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 将下划线大写方式命名的字符串转换为驼峰式。如果转换前的下划线大写方式命名的字符串为空，则返回空字符串。 例如：HELLO_WORLD->HelloWorld\n     * \n     * @param name 转换前的下划线大写方式命名的字符串\n     * @return 转换后的驼峰式命名的字符串\n     */\n    public static String convertToCamelCase(String name)\n    {\n        StringBuilder result = new StringBuilder();\n        // 快速检查\n        if (name == null || name.isEmpty())\n        {\n            // 没必要转换\n            return \"\";\n        }\n        else if (!name.contains(\"_\"))\n        {\n            // 不含下划线，仅将首字母大写\n            return name.substring(0, 1).toUpperCase() + name.substring(1);\n        }\n        // 用下划线将原始字符串分割\n        String[] camels = name.split(\"_\");\n        for (String camel : camels)\n        {\n            // 跳过原始字符串中开头、结尾的下换线或双重下划线\n            if (camel.isEmpty())\n            {\n                continue;\n            }\n            // 首字母大写\n            result.append(camel.substring(0, 1).toUpperCase());\n            result.append(camel.substring(1).toLowerCase());\n        }\n        return result.toString();\n    }\n\n    /**\n     * 驼峰式命名法 例如：user_name->userName\n     */\n    public static String toCamelCase(String s)\n    {\n        if (s == null)\n        {\n            return null;\n        }\n        s = s.toLowerCase();\n        StringBuilder sb = new StringBuilder(s.length());\n        boolean upperCase = false;\n        for (int i = 0; i < s.length(); i++)\n        {\n            char c = s.charAt(i);\n\n            if (c == SEPARATOR)\n            {\n                upperCase = true;\n            }\n            else if (upperCase)\n            {\n                sb.append(Character.toUpperCase(c));\n                upperCase = false;\n            }\n            else\n            {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T cast(Object obj)\n    {\n        return (T) obj;\n    }\n}\n\n```\n', '2020-12-14 22:52:45', 0, 'JavaSE', 1, '2020-12-14 22:52:45');

-- ----------------------------
-- Table structure for m_comment
-- ----------------------------
DROP TABLE IF EXISTS `m_comment`;
CREATE TABLE `m_comment`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论内容',
  `created` datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '创建时间',
  `nick_name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论者id',
  `email` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '评论者邮箱',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of m_comment
-- ----------------------------
INSERT INTO `m_comment` VALUES (4, '啊哈哈啊哈', '2020-12-13 20:37:37', 'ccc', '1247909630@qq.com');
INSERT INTO `m_comment` VALUES (5, 'helloworld', '2020-12-13 20:37:40', 'cbn', '1247909630@qq.com');
INSERT INTO `m_comment` VALUES (6, 'helloworld', '2020-12-13 20:37:40', 'cbn', '1247909630@qq.com');
INSERT INTO `m_comment` VALUES (7, '你好呀', '2020-12-13 23:51:59', '你好', '1247909630@qq.com');

-- ----------------------------
-- Table structure for m_tag
-- ----------------------------
DROP TABLE IF EXISTS `m_tag`;
CREATE TABLE `m_tag`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `tag` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 28 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of m_tag
-- ----------------------------
INSERT INTO `m_tag` VALUES (1, 'JavaSE');
INSERT INTO `m_tag` VALUES (2, 'Spring');
INSERT INTO `m_tag` VALUES (3, 'Mysql');
INSERT INTO `m_tag` VALUES (4, 'Mybatis');
INSERT INTO `m_tag` VALUES (5, 'Linux');
INSERT INTO `m_tag` VALUES (6, 'MQ');
INSERT INTO `m_tag` VALUES (7, 'docker');
INSERT INTO `m_tag` VALUES (26, 'nginx');
INSERT INTO `m_tag` VALUES (27, 'redis');

-- ----------------------------
-- Table structure for m_user
-- ----------------------------
DROP TABLE IF EXISTS `m_user`;
CREATE TABLE `m_user`  (
  `id` bigint(0) NOT NULL AUTO_INCREMENT,
  `username` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `email` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `password` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `status` int(0) NOT NULL,
  `created` datetime(0) NULL DEFAULT NULL,
  `last_login` datetime(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `UK_USERNAME`(`username`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of m_user
-- ----------------------------
INSERT INTO `m_user` VALUES (1, 'cbn', 'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1607968111522&di=a4cba489b165cd31fe394849d1a0053e&imgtype=0&src=http%3A%2F%2Fpic2.58cdn.com.cn%2Fp1%2Fbig%2Fn_v2e20ea3ad7938462ca0ec717c1676bcce.jpg', NULL, '96e79218965eb72c92a549dd5a330112', 0, '2020-11-20 10:44:01', NULL);

SET FOREIGN_KEY_CHECKS = 1;
